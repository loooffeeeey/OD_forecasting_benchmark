import os
import argparse
import json
import numpy as np
import torch

# Coordinates to be checked
CHECK_IDXS_D = [49, 50, 67, 68, 86, 87, 104, 105, 106, 122, 123, 124, 125, 126, 127, 141, 142, 143, 144, 145, 146,
                160, 161, 162, 163, 164, 165, 179, 180, 181, 182, 198, 199, 200, 201, 217, 218, 219, 224, 236, 237,
                238, 243, 244]
CHECK_COORDS_G = [(49, 49), (49, 67), (49, 68), (67, 49), (67, 67), (67, 68), (67, 86), (67, 104), (86, 49), (86, 67),
                  (86, 68), (86, 86), (86, 87), (86, 104), (86, 105), (86, 123), (86, 124), (86, 141), (86, 142),
                  (86, 161), (104, 49), (104, 67), (104, 86), (104, 104), (104, 105), (104, 123), (104, 124),
                  (104, 141), (104, 142), (104, 143), (104, 160), (104, 161), (104, 180), (104, 181), (105, 49),
                  (105, 50), (105, 67), (105, 86), (105, 87), (105, 104), (105, 105), (105, 106), (105, 123),
                  (105, 124), (105, 125), (105, 141), (105, 142), (105, 143), (105, 160), (105, 161), (106, 105),
                  (122, 123), (122, 141), (122, 142), (122, 161), (122, 180), (123, 49), (123, 67), (123, 68),
                  (123, 86), (123, 87), (123, 104), (123, 105), (123, 106), (123, 122), (123, 123), (123, 124),
                  (123, 125), (123, 141), (123, 142), (123, 143), (123, 144), (123, 145), (123, 160), (123, 161),
                  (123, 162), (123, 164), (123, 165), (123, 179), (123, 180), (123, 185), (123, 199), (123, 200),
                  (123, 237), (124, 49), (124, 67), (124, 86), (124, 87), (124, 104), (124, 105), (124, 106),
                  (124, 123), (124, 124), (124, 125), (124, 141), (124, 142), (124, 143), (124, 144), (124, 145),
                  (124, 146), (124, 160), (124, 161), (124, 162), (124, 165), (124, 179), (124, 180), (124, 181),
                  (124, 182), (124, 198), (124, 199), (124, 218), (125, 124), (125, 125), (125, 143), (125, 144),
                  (125, 162), (127, 145), (141, 67), (141, 86), (141, 104), (141, 105), (141, 122), (141, 123),
                  (141, 124), (141, 125), (141, 141), (141, 142), (141, 143), (141, 160), (141, 161), (141, 162),
                  (141, 179), (141, 180), (141, 181), (141, 198), (141, 199), (141, 200), (142, 48), (142, 49),
                  (142, 67), (142, 68), (142, 70), (142, 86), (142, 87), (142, 104), (142, 105), (142, 122),
                  (142, 123), (142, 124), (142, 125), (142, 126), (142, 129), (142, 141), (142, 142), (142, 143),
                  (142, 144), (142, 145), (142, 146), (142, 147), (142, 160), (142, 161), (142, 162), (142, 163),
                  (142, 164), (142, 165), (142, 179), (142, 180), (142, 181), (142, 182), (142, 185), (142, 198),
                  (142, 199), (142, 200), (142, 201), (142, 218), (142, 219), (142, 224), (142, 237), (142, 255),
                  (143, 104), (143, 105), (143, 123), (143, 124), (143, 125), (143, 141), (143, 142), (143, 143),
                  (143, 144), (143, 160), (143, 161), (143, 179), (144, 125), (144, 142), (144, 143), (144, 144),
                  (144, 145), (144, 161), (144, 164), (145, 144), (145, 145), (146, 146), (160, 67), (160, 86),
                  (160, 104), (160, 105), (160, 123), (160, 124), (160, 125), (160, 141), (160, 142), (160, 143),
                  (160, 144), (160, 145), (160, 160), (160, 161), (160, 162), (160, 179), (160, 180), (160, 181),
                  (160, 182), (160, 198), (160, 199), (160, 200), (160, 219), (160, 236), (160, 254), (161, 49),
                  (161, 67), (161, 86), (161, 104), (161, 105), (161, 122), (161, 123), (161, 124), (161, 125),
                  (161, 141), (161, 142), (161, 143), (161, 144), (161, 145), (161, 160), (161, 161), (161, 162),
                  (161, 165), (161, 179), (161, 180), (161, 181), (161, 182), (161, 198), (161, 199), (161, 200),
                  (161, 201), (161, 218), (161, 219), (161, 236), (162, 142), (162, 143), (162, 162), (162, 181),
                  (162, 182), (162, 198), (162, 200), (165, 144), (179, 104), (179, 105), (179, 123), (179, 124),
                  (179, 141), (179, 142), (179, 143), (179, 144), (179, 160), (179, 161), (179, 162), (179, 179),
                  (179, 180), (179, 181), (179, 199), (179, 200), (179, 201), (180, 124), (180, 142), (180, 144),
                  (180, 160), (180, 161), (180, 179), (180, 180), (180, 181), (180, 199), (180, 200), (180, 201),
                  (181, 124), (181, 142), (181, 160), (181, 161), (181, 162), (181, 180), (181, 181), (181, 182),
                  (181, 199), (181, 200), (181, 201), (182, 181), (182, 182), (198, 160), (198, 181), (198, 198),
                  (198, 199), (199, 142), (199, 160), (199, 161), (199, 162), (199, 179), (199, 180), (199, 181),
                  (199, 182), (199, 198), (199, 199), (199, 200), (199, 201), (199, 218), (199, 219), (199, 236),
                  (200, 160), (200, 161), (200, 199), (200, 200), (200, 219), (201, 201), (218, 199), (218, 218),
                  (244, 104), (244, 124), (244, 199), (244, 224)]
check_D_list = [49, 198, 224, 237, 244]
check_G_list = [(49, 49), (124, 125), (145, 144), (244, 224), (160, 143)]


def analyze(data_dir='../data/ny2016_0101to0331/'):
    req_info = json.load(open(os.path.join(data_dir, 'req_info.json')))
    total_H = req_info['totalH']

    check_dict = {'D': {}, 'G': {}}
    for idx in check_D_list:
        check_dict['D'][idx] = []
    for coords in check_G_list:
        check_dict['G'][coords] = []

    for i in range(total_H):
        cur_ts = i + 1
        GDVQ_ts = np.load(os.path.join(data_dir, str(cur_ts), 'GDVQ.npy'), allow_pickle=True).item()
        G_ts, D_ts = torch.from_numpy(GDVQ_ts['G']), torch.from_numpy(GDVQ_ts['D'])
        for coords in check_dict['G']:
            check_dict['G'][coords].append(G_ts[coords])
        for idx in check_dict['D']:
            check_dict['D'][idx].append((D_ts[idx]))
    res_dict = {'D': {}, 'G': {}}
    for task in check_dict:
        for coordsORidx in check_dict[task]:
            std, mean = torch.std_mean(torch.stack(check_dict[task][coordsORidx]))
            res_dict[task][str(coordsORidx)] = {'mean': mean.item(), 'std': std.item()}
    saved_path = os.path.join(data_dir, 'request_analysis.json')
    with open(saved_path, 'w') as f:
        json.dump(res_dict, f)
    print('Request Analysis saved to {}'.format(saved_path))


if __name__ == '__main__':
    """
        Usage Example:
            python DataAnalysis.py -d ../data/ny2016_0101to0331/
    """
    # Command Line Arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--data_dir', type=str, default='../data/ny2016_0101to0331/',
                        help='The input data directory to be analyzed, default={}'.format('../data/ny2016_0101to0331/'))
    FLAGS, unparsed = parser.parse_known_args()

    # DO STH
    data_dir = FLAGS.data_dir
    if os.path.isdir(data_dir):
        analyze(data_dir=data_dir)
